` Quick Sort

arrSwap = !'arrSwap' array, i, j.
  aux = array_j.
  array_j = array_i.
  array_i = aux.
..

qSort = !'quick sort' array, len.
  [len < 2u => !!.]
  len = N%(Z%len - 1).
  !'recursive aux' array, low, high.
    [low >= high => !!.]
    pi = 0u.
    ` partition
    pivot = array_high.
    i = Z%low - 1.
    j = low.
    @ [[j < high]]
      [array_j <= pivot =>
        i ++ 1.
        arrSwap!array, N%i, j.
      ]
      j ++ 1u.
    .
    i = N%(i + 1).
    arrSwap!array, i, high.
    pi = i.
    !@!array, low, N%(Z%pi - 1).
    !@!array, pi + 1u, high.
  . !array, 0u, N%len.
..

array = _10u, 7u, 8u, 9u, 1u, 5u;.
qSort!array, STD$a$len#array;.
put = STD$io$put.
put!'array is '.
put!array.
put!"?N".
