` calc.df

` some useful stuff
put = STD$io$put.
eke = STD$a$eke.
putLn = !x. put!x. put!"?N"...

` L E X E R ----------------


TokTyp = $
  PLUS     = "+".
  MINUS    = "-".
  STAR     = "*".
  SLASH    = "/".
  NUMBER   = "0".
  EOF      = "?0".
  UNKNOWN  = "U".
;.

Token = $
  new = \#tt; $type = tt.;..
  newNumber = \#n; $type = TokTyp$NUMBER. val = n.;..
;.

isDigit = \#c; "0" <= c &? c <= "9"..

CA2Z = #s; ` parse string (C%arr) to Z%
  res = 0.
  sLen = Z%STD$a$len#s;.
  i = 0. @[[i < sLen]]
    d = 0.
    [s_i:
    |"0" => d = 0.
    |"1" => d = 1.
    |"2" => d = 2.
    |"3" => d = 3.
    |"4" => d = 4.
    |"5" => d = 5.
    |"6" => d = 6.
    |"7" => d = 7.
    |"8" => d = 8.
    |"9" => d = 9.
    | => .#V. ` error
    ]
    res = res * 10 + d.
    i ++ 1.
  .
  .#res.
..

tokenize = #f;
  f = f + '?0'.
  fLen = Z%STD$a$len#f;.
  Lexer = $
    bi = 0.
    ci = 0.
    tokens = _;.
  ;.
  advance = !. Lexer$ci ++ 1...
  isAtEnd = \#; Lexer$ci + 1 == fLen..
  currChar = \#; f_Lexer$ci..
  pushToken = !tok.
    Lexer$bi = Lexer$ci.
    eke!Lexer$tokens, tok.
  ..
  pushSimple = !tt. pushToken!Token$new#tt;...
  readNumber = !'readNumber' d0. ` d0: Ã¾e starting digit
    number = _d0;. `empty string
    @ c = currChar#;.
      [[isDigit#c;]]
      eke!number, c.
      advance!.
    .
    value = CA2Z#number;.
    pushToken!Token$newNumber#value;.
  ..
  @
    c = currChar#;.
    advance!.
    [c:
    |"?0"=> pushSimple!TokTyp$EOF.   .@.
    |" " => @@. ` skip whitespace
    |"+" => pushSimple!TokTyp$PLUS.  @@.
    |"-" => pushSimple!TokTyp$MINUS. @@.
    |"*" => pushSimple!TokTyp$STAR.  @@.
    |"/" => pushSimple!TokTyp$SLASH. @@.
    ]
    [isDigit#c; => readNumber!c.
    | => pushSimple!TokTyp$UNKNOWN.
    ]
  .
  .#Lexer$tokens.
..

` P A R S E R ----------------

NodTyp = $
  BINoP = "2".
  NUMBER = "0".
;.

Node = $
  newNumber = \#n; $type = NodTyp$NUMBER. val = n.;..
  newBinOp = \#l, o, r; `o must be a TokTyp
    $type = NodTyp$BINoP. lhs=l. op=o. rhs=r.;
  ..
;.

parse = #tokens;
  Parser = $
    cursor = 0.
    result = V.
  ;.
  tokLen  = Z%STD$a$len#tokens;.
  cursor  = \#; Parser$cursor..
  advance =  !. Parser$cursor ++ 1...
  result  = \#; Parser$result..
  isAtEnd = \#; cursor#; + 1 == tokLen..
  peek    = \#; tokens_cursor#;..
  matches = \#type; peek#;$type == type..
  expAdv  =  !type.
    [matches#type; => advance!.
    | =>
      put!'expected token matches '.
      put!type.
      put!"?N".
      a = /T.
    ]
  ..

  ` GRAMAR

  number = !.
    n = peek#;.
    [matches#TokTyp$NUMBER; =>
      advance!.
      Parser$result = Node$newNumber#n$val;.
    | =>
      put!'expected number'. a = /T.
    ]
  ..

  mulExpr = !.
    number!.
    acc = result#;.
    @ [[matches#TokTyp$STAR;
     |? matches#TokTyp$SLASH;]]
      op = peek#;.
      advance!.
      number!.
      acc = Node$newBinOp#acc, op$type, result#;;.
    .
    Parser$result = acc.
  ..

  addExpr = !.
    mulExpr!.
    acc = result#;.
    @ [[matches#TokTyp$PLUS;
     |? matches#TokTyp$MINUS;]]
      op = peek#;.
      advance!.
      mulExpr!.
      acc = Node$newBinOp#acc, op$type, result#;;.
    .
    Parser$result = acc.
  ..

  expr = !.
    addExpr!.
  ..

  ` MAIN

  expr!.
  [~isAtEnd#; =>
    put!'expected EOF, found:'. putLn!peek#;.
    a=/T.
  ]
  .#Parser$result.
..

walk = #node;
  [node$type:
  |NodTyp$NUMBER => .#R%node$val.
  |NodTyp$BINoP  =>
    [node$op:
    |TokTyp$PLUS  => .##@#node$lhs; + #@#node$rhs;.
    |TokTyp$MINUS => .##@#node$lhs; - #@#node$rhs;.
    |TokTyp$STAR  => .##@#node$lhs; * #@#node$rhs;.
    |TokTyp$SLASH => .##@#node$lhs; / #@#node$rhs;.
    ]
  ]
..

`for reading files: STD$io$readFile#'path/to/df';.

string = '2*50 + 1+1'.
tokens = tokenize#string;.
ast = parse#tokens;.

put!string.
put!' = '.
putLn!walk#ast;.

