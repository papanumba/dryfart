put = STD$io$put.
eke = STD$a$eke.

Node = $;.


f = '1+3111?0?0'.
`STD$io$readFile#'/home/danilo/Desktop/prog/dryfart/lines.sh';.


` L E X E R ----------------


TokTyp = $
  PLUS = "+".
  MINUS = "-".
  NUMBER = "0".
  UNKNOWN = "U".
;.

Token = $
  new = \#tt; $type = tt.;..
  newNumber = \#n; $type = TokTyp$NUMBER. val = n.;..
;.

isDigit = \#c; "0" < c &? c < "9"..

CA2Z = #s; ` parse string (C%arr) to Z%
  res = 0.
  sLen = Z%STD$a$len#s;.
  i = 0. @[[i < sLen]]
    d = 0.
    [s_i:
    |"0" => d = 0.
    |"1" => d = 1.
    |"2" => d = 2.
    |"3" => d = 3.
    |"4" => d = 4.
    |"5" => d = 5.
    |"6" => d = 6.
    |"7" => d = 7.
    |"8" => d = 8.
    |"9" => d = 9.
    | => .#V. ` error
    ]
    res = res * 10 + d.
    i ++ 1.
  .
  .#res.
..

tokenize = #f;
  fLen = Z%STD$a$len#f;.
  Lexer = $
    bi = 0.
    ci = 0.
    tokens = _;.
  ;.
  advance = !. Lexer$ci ++ 1...
  isAtEnd = \#; Lexer$ci + 1 == fLen..
  currChar = \#; f_Lexer$ci..
  pushToken = !tok.
    Lexer$bi = Lexer$ci.
    eke!Lexer$tokens, tok.
  ..
  pushSimple = !tt. pushToken!Token$new#tt;...
  readNumber = !'readNumber' d0. ` d0: Ã¾e starting digit
    number = _d0;. `empty string
    put!'?Nstarting number with '.
    put!d0.
    put!'?N'.
    @ put!(~T).`isAtEnd#;.` &? isDigit#currChar#;;.
      [[isDigit#currChar#;;]]
      eke!number, currChar#;.
      advance!.
    .
    value = CA2Z#number;.
    pushToken!Token$newNumber#value;.
  ..
  @
    c = currChar#;.
    advance!.
    [c:
    |"?0" => .@. `EOF
    |"+" => pushSimple!TokTyp$PLUS.
    |"-" => pushSimple!TokTyp$MINUS.
    ]
    [isDigit#c; => readNumber!c.]
    `| => pushSimple!TokTyp$UNKNOWN.
  .
  .#Lexer$tokens.
..

tokens = tokenize#f;.


`put!f.
`put!"?N".
put!tokens.

