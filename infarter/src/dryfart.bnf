use https://bnfplayground.pauliankline.com/;

<Block>   ::= <Stmt>+
<Stmt>    ::= <Assign>
            | <IfElse>
            | <Loop>
            | <Break>
            | <Return>
            | <PcCall> # beware: lookahead bcoz of assign
            | <EndProc>

<Assign>  ::= <Ident> ("_" <Index>)* "=" <Expr> "."

<IfElse>  ::= "[" <Expr> "=>" <Block>    # if
            ( "|" <Expr> "=>" <Block> )* # else if
            ( "|"        "=>" <Block> )? # else
              "]"

<Loop>    ::= "@"    (               <Block>  # inf-loop
                      "(" <Expr> ")" <Block>  # while
            | <Block> "(" <Expr> ")"          # do while
            | <Block> "(" <Expr> ")" <Block>) # while(true) if _ break
            "."
<Break>   ::= "@@" <N> "." # break Nth level loop, normal = 0

<Return>  ::= "##" <Expr> "."

<PcCall>  ::= <Ident> "!" <CommaEx>? "."
<EndProc> ::= "!!" <N> "." # end Nth level proc call

<Expr>    ::= <OrExpr>
<OrExpr>  ::= <AndExpr> ("|" <AndExpr>)*
<AndExpr> ::= <AndTerm> ("&" <AndTerm>)*
<AndTerm> ::= "~"* <CmpExpr> # yes: ~ neg has weaker precedence than ==

<CmpExpr> ::= <AddExpr> (("[=~]=" | "[<>]=?") <AddExpr>)?

<AddExpr> ::= <AddTerm> (("+" | "-") <AddTerm>)*
<AddTerm> ::= "-"* <MulExpr>

<MulExpr> ::= <MulTerm> (("*" | "/") <MulTerm>)*
<MulTerm> ::= "/"* <CastExpr>

<CastExpr> ::= <PrimType>* <IdxExpr>

### Indexed or FnCall expr
<IdxExpr> ::= <IdxTerm> ("_" <IdxTerm>)*
<IdxTerm> ::= <Nucle> <FnArgs>*
<FnArgs>  ::= "#" <CommaEx>? ";"
<CommaEx> ::= <Expr> ("," <Expr>)*

### AnonFn
<AnonFn>  ::= "#" <FnPars>? ";" <Block> "."
<FnPars>  ::= <Ident> ("," <Ident>)*

### Nucle
<Nucle>   ::= <AnonFn> | <PrimLit> | <Ident> | <Parented> | "@" # recurs
<Ident>   ::= "[A-Za-z][A-Za-z0-9]*"
<Parented> ::= "(" <Expr> ")"

### Type
<ArrType>  ::= <PrimType> | "#%"
<PrimType> ::= "[BCNZR]%"

### Literals
<ArrLit>  ::= "{" <CommaEx>? "}"
<String>  ::= "check implementation"
<PrimLit> ::= <B> | <N> | <R>
<B> ::= "[TF]"
<N> ::= "[0-9]+"
<R> ::= "[0-9]+\.[0-9]+"
    1
